# Storage backends:
#   filesystem
# The following testing scenario is covered:
#   Export allocation depth with qemu-nbd
#   Export allocation depth with block-export-add
#       base -> sn(exported): backing should be checked
#       inc(exported): local should be checked
#       backing: "zero":true,  "data":true
#       local: "zero":false, "data":false
# Note:
#   The images to be exported are local fs images

- blockdev_inc_backup_xpt_allocation_depth:
    only Linux
    only filesystem
    start_vm = no
    kill_vm = yes
    qemu_force_use_drive_expression = no
    type = blockdev_inc_backup_xpt_allocation_depth
    virt_test_type = qemu
    images += ' data1'
    image_backup_chain = base sn
    storage_pools = default
    storage_pool = default
    storage_type_default = directory
    full_backup_options = '{"sync": "full"}'
    image_chain = ${image_backup_chain}
    rebase_mode = unsafe

    source_images = data1
    image_size_data1 = 2G
    image_name_data1 = data1
    image_format_data1 = qcow2
    remove_image_data1 = yes
    force_create_image_data1 = yes

    # base is a local image to be exported
    image_format_base = qcow2
    image_name_base = base
    image_size_base = ${image_size_data1}

    # sn is a local snapshot image(base->sn) to be exported
    backing_sn = base
    image_format_sn = qcow2
    image_name_sn = sn
    image_size_sn = ${image_size_data1}

    # settings for nbd export
    nbd_port = 10850
    nbd_export_name = nbdimage
    nbd_allocation_exported = yes

    # settings for the access to the exported image
    nbd_image_tag = nbdimage
    nbd_port_nbdimage = ${nbd_port}
    nbd_export_name_nbdimage = ${nbd_export_name}
    enable_nbd_nbdimage = yes
    storage_type_nbdimage = nbd
    dirty_bitmap_opt = x-dirty-bitmap

    variants:
        - with_qemu_nbd:
            nbd_export_format = qcow2
        - with_block_export:
            block_export_uid = nbdimage_uid
            block_export_writable = no
