- virtio_serial_file_transfer:
    type = virtio_serial_file_transfer
    guest_scripts = VirtIoChannel_guest_send_receive.py;windows_support.py
    guest_script_folder = /var/tmp/
    file_transfer_serial_port = vs1
    serials += " vs1"
    serial_type_vs1 = virtserialport
    file_sender = both
    transfer_timeout = 720
    clean_cmd = rm -f
    filesize = 10
    host_script = serial_host_send_receive.py
    guest_script = VirtIoChannel_guest_send_receive.py
    Windows:
        driver_name = vioser
        guest_script_folder = C:\
        clean_cmd = del /f /q
        tmp_dir = %TEMP%
        python_bin = python
        memory_leak_check = yes
        i386, i686:
            devcon_dirname = 'x86'
        x86_64:
            devcon_dirname = 'amd64'
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
        cdroms += " virtio"
    variants:
        - @default:
        - long_time_test:
            only Linux
            only tcp_socket
            type = virtio_serial_large_file_transfer
            filesize = 1000
            variants:
                - from_host_to_guest:
                    file_sender = host
                - from_guest_to_host:
                    file_sender = guest
        - boot_with_multiple_virtserialports:
            type = boot_N_M_virtserialports
            only unix_socket
            filesize = 512
            variants:
                - 1_N:
                    serials += " vs2 vs3"
                    serial_type_vs2 = virtserialport
                    serial_type_vs3 = virtserialport
                - N_M:
                    serials += " vs2 vs3 vs4 vs5 vs6"
                    serial_type_vs2 = virtserialport
                    serial_type_vs3 = virtserialport
                    serial_type_vs4 = virtserialport
                    serial_bus_vs4 = "<new>"
                    serial_type_vs5 = virtserialport
                    serial_type_vs6 = virtserialport
                - N_1:
                    start_vm = no
                    numberic_bus = 26
        - max_ports:
            only unix_socket
            type = virtio_serial_file_transfer_max_ports
            start_vm = no
            virtio_serial_ports = 30
        - offline_migration:
            only unix_socket
            qemu_sandbox_spawn = "allow"
            type = virtio_serial_file_transfer_offline_migrate
            serials += " vs2"
            serial_type_vs2 = virtserialport
            migration_protocol = "exec"
            migration_exec_cmd_src = "gzip -c > '%s'"
            migration_exec_cmd_dst = "gzip -c -d '%s'"
        - abstract:
            only Linux
            only unix_socket
            chardev_abstract_vs1 = 'on'
            variants:
                - tight_on:
                    chardev_tight_vs1 = 'on'
                - tight_off:
                    chardev_tight_vs1 = 'off'
    variants:
        - unix_socket:
        - tcp_socket:
            chardev_backend_vs1 = tcp_socket
        - pty:
            chardev_backend_vs1 = pty
    variants:
        - @default:
        - iommu_enabled:
            virtio_dev_iommu_platform = on
            x86_64, i386:
                only HostCpuVendor.intel
                only q35
                only unix_socket
                only default
                no WinXP WinVista Win7 Win8 Win8.1 Win2000 Win2003
                no Win2008 Win2008..r2 Win2012 Win2012..r2
                intel_iommu = yes
                iommu_eim = on
                enable_guest_iommu = yes
                virtio_dev_ats = on
                machine_type_extra_params = "kernel-irqchip=split"
            ppc64, ppc64le:
                virtio_dev_disable_legacy = on
                virtio_dev_disable_modern = off
