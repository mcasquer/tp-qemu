# Network storage backends:
#   nbd
# The following testing scenarios are covered:
#   kill/reconnect a remote virtio-scsi image
#   kill/reconnect a remote virtio-blk image

- block_kill_reconnect_with_remote_storage:
    no RHEL.3.9
    only nbd
    virt_test_type = qemu
    start_vm = no
    type = block_kill_reconnect_with_remote_storage
    bootindex_image1 = 0
    images += " data1"
    boot_drive_data1 = yes
    image_size_data1 = 2G
    image_name_data1 = data1
    check_image_data1 = no
    nbd_reconnect_delay = 60
    get_disk_cmd = "ls /dev/[hsv]d[a-z]* | sort"
    disk_op_cmd = "dd if=/dev/zero of=%s bs=1k count=1000 oflag=direct &&"
    disk_op_cmd += " dd if=%s of=/dev/null bs=1k count=1000 iflag=direct"
    find_system_disk_cmd = "df -h | grep '/boot$' | awk -F "[0-9] " '{print $1}'"
    find_data_disk_cmd = "ls /dev/[vhs]d* | grep -v %s"
    kill_vm = yes
    repeat_times = 3
    reconnect_time_wait = 30
    # Settings for a local fs image 'data',
    # which will be exported by qemu-nbd
    local_image_tag = data
    storage_type_default = directory
    image_size_data = ${image_size_data1}
    image_name_data = data
    image_format_data = qcow2
    preallocated_data = falloc
    nbd_port_data = 10810
    nbd_export_format_data = raw
    enable_nbd_data = no
    image_raw_device_data = no
    # Settings for nbd image 'data1',
    # i.e. the exported 'data'
    nbd_image_tag = data1
    enable_nbd_data1 = yes
    storage_type_data1 = nbd
    nbd_port_data1 = ${nbd_port_data}
    image_format_data1 = ${image_format_data}
    # commands used for break connection to nbd image
    net_break_cmd = "iptables -I INPUT -p tcp --dport ${nbd_port_data1} -j REJECT"
    net_resume_cmd = "iptables -D INPUT -p tcp --dport ${nbd_port_data1} -j REJECT"
