- netperf: install setup image_copy unattended_install.cdrom
    virt_test_type = qemu libvirt
    type = netperf
    kill_vm = yes
    image_snapshot = yes
    setup_ksm = no
    take_regular_screendumps = no
    store_vm_register = no
    # sometimes since vm performance issue or processors could not handle
    # at same time with mis-config sessions number, it may not all clients
    # up at same times, please modify tires parameter to repeat sub tests
    # to increase the successful probalility
    tries = 5
    # Please update following comments params when you need special cfg for
    # your test nic cards
    # nic1 is for control, nic2 is for data connection
    nics += ' nic2'
    # queues = 4
    enable_msix_vectors = yes
    #Configure different types of network adapters.
    nic_model_nic1 = virtio
    nic_model_nic2 = virtio
    i386, x86_64:
        nic_model_nic2 = e1000
    netdst_nic1 = private
    netdst_nic2 = switch
    # please fix the mac for nic2 if you needed with this, this can be empty
    # nic_mac_nic2 =
    # please add the physical nic you want to add to your private bridge
    # this can be empty
    # physical_nic =
    # bridge_force_create=yes
    # bridge_nic1 =
    #numa configration
    numa_node = -1
    netperf_with_numa = yes
    # configure netperf test parameters, some seconds will be took to
    # wait all the clients work, this wait time should be less than
    # 0.5 * l, the wait time will augments if you have move
    # threads. So experientially suggest l should be not less than 60.
    l = 60
    #Test protocol and test data configration
    protocols = "TCP_STREAM TCP_MAERTS TCP_RR"
    sessions = "1 2 4 8"
    sessions_rr = "1 25 50"
    sizes = "64 256 1024 4096 16384 65535"
    sizes_rr = "64 256 4096"
    #client configuration
    client = localhost
    username_client = root
    password_client = 123456
    shell_client_client = ssh
    shell_port_client = 22
    shell_prompt_client =  \[root@.{0,50}][\#\$]
    #host configuration
    shell_port_host = 22
    password_host = 123456
    username_host = root
    os_type_client = linux
    os_type_host = linux
    shell_prompt_host =  \[root@.{0,50}][\#\$]
    #Test base env configration
    ver_cmd = rpm -q qemu-kvm
    netperf_version = 2.7.1
    netperf_pkg = netperf/netperf-2.7.1.tar.bz2
    setup_cmd = "cd /tmp && rm -rf netperf-2.7.1 && tar xvfj netperf-2.7.1.tar.bz2 && cd netperf-2.7.1 && sh autogen.sh && CFLAGS=-Wno-implicit-function-declaration ./configure --enable-burst --enable-demo=yes && make"
    ppc64:
        setup_cmd = "cd /tmp && rm -rf netperf-2.7.1 && tar xvfj netperf-2.7.1.tar.bz2 && cd netperf-2.7.1 && sh autogen.sh && CFLAGS=-Wno-implicit-function-declaration ./configure --build=ppc64 --enable-burst --enable-demo=yes  && make"
    ppc64le:
        setup_cmd = "cd /tmp && rm -rf netperf-2.7.1 && tar xvfj netperf-2.7.1.tar.bz2 && cd netperf-2.7.1 && sh autogen.sh && CFLAGS=-Wno-implicit-function-declaration ./configure --build=ppc64le --enable-burst --enable-demo=yes  && make"
    log_hostinfo_script = scripts/rh_perf_log_hostinfo_script.sh
    host_tuned_profile = "tuned-adm profile virtual-host"
    client_tuned_profile = "tuned-adm profile virtual-host"
    client_kill_linux = "killall netperf"
    client_kill_windows = "taskkill /F /IM netperf*"
    # Now the get status functions are implemented for RHEL and Fedora guests.
    # Not test with other guests, please set this depends on your guest os
    # environment.
    RHEL, Fedora:
        get_status_in_guest = yes
    Linux:
    #    log_guestinfo_script = scripts/rh_perf_log_guestinfo_script.sh
    #    log_guestinfo_exec = bash
    #    log_guestinfo_path = /tmp/log_guestinfo.sh
        server_tuned_profile = "tuned-adm profile virtual-guest"
        server_mtu_cmd = "ifconfig %s mtu %s"
    Windows:
    #    log_guestinfo_script = scripts/rh_perf_log_guestinfo_script.bat
    #    log_guestinfo_exec = cmd /c
    #    log_guestinfo_path = C:\log_guestinfo.bat
        server_mtu_cmd = "netsh interface ipv4 set subinterface "%s" mtu=%s"
        i386, x86_64:
            cpu_model_flags = ",hv_time,hv_relaxed,hv_vapic,hv_spinlocks=0xfff"
        windows_disable_firewall = "netsh advfirewall set allprofiles state off"
        devcon_dirname = "win7_"
        i386:
            devcon_dirname += "x86"
        x86_64:
            devcon_dirname += "amd64"
    client_mtu_cmd = "ifconfig %s mtu %s"
    host_mtu_cmd = "ifconfig %s mtu %s"
    #FIXME: it's a workaround, it needs a better way to disable all the firewall rules
    env_setup_cmd = "systemctl stop firewalld.service ; service iptables stop ; iptables -F ; nft flush ruleset;"
    env_setup_cmd += " echo 2 > /proc/sys/net/ipv4/conf/all/arp_ignore;"
    env_setup_cmd += " echo 0 > /sys/kernel/mm/ksm/run;"
    env_setup_cmd += " echo 0 > /proc/sys/kernel/watchdog;"
    env_setup_cmd += " echo 0 > /proc/sys/kernel/nmi_watchdog;"
    env_setup_cmd += " setenforce 1"
    variants:
        - guest_guest:
            no Jeos
            only Linux
            client = vm2
            vms += " vm2"
            nics = 'nic1'
        - host_guest:
            Windows:
                netserv_start_cmd = "start /b %s:\netserver-2.6.0.exe"
                guest_ver_cmd = "ver"
                use_cygwin = no
            variants:
                - @default_setting:
                    Linux:
                        no Jeos
                        # to test exthost <-> guest:
                        # client = <external host's private ip>
                        # client_public_ip = <external host's public ip>
                        # server_private_ip = <netperf server's private ip>
                    Windows:
                        #client = <external host/guest ip>
                        config_cmds = driver_verifier_query
                        driver_verifier_query = "verifier /querysettings"
                        reboot_after_config = yes
                        install_vioprot_cmd = "netcfg -v -l %s -c p -i VIOPROT"
                        cdroms += " virtio winutils"
                        virtio_win_media_type = iso
                        driver_name = netkvm VIOPROT
                        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
                        device_name = "Red Hat VirtIO Ethernet Adapter"
                        device_hwid = '"PCI\VEN_1AF4&DEV_1000" "PCI\VEN_1AF4&DEV_1041"'
                - best_registry_setting:
                    only Windows
                    reboot_after_config = yes
                    # For more information about windows registry setting document,
                    #please refer to http://www.linux-kvm.org/page/WindowsGuestDrivers/kvmnet/registry
                    config_cmds = afd_cmd1,afd_cmd2,afd_cmd3, tcpip_cmd1,tcpip_cmd2
                    afd_cmd1 = reg add "HKLM\SYSTEM\CurrentControlSet\Services\AFD\Parameters" /v DefaultSendWindow /d 0x00100000 /t REG_DWORD /f
                    afd_cmd2 = reg add "HKLM\SYSTEM\CurrentControlSet\Services\AFD\Parameters" /v DefaultReceiveWindow /d 0x00100000 /t REG_DWORD /f
                    afd_cmd3 = reg add "HKLM\SYSTEM\CurrentControlSet\Services\AFD\Parameters" /v FastSendDatagramThreshold /d 0x00004000 /t REG_DWORD /f
                    tcpip_cmd1 = reg add "HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /v Tcp1323Opts /d 0x00000001 /t REG_DWORD /f
                    tcpip_cmd2 = reg add "HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /v TcpWindowSize /d 0x00100000 /t REG_DWORD /f
                    disable_tcp_heuristics_cmd = "netsh int tcp set heuristics disabled"
                    disabled_tcp_autotuning_cmd = "netsh int tcp set global autotuninglevel=disabled"
                    enable_ctcp_cmd = "netsh int tcp set global congestionprovider=ctcp"
                    Win2008, Win2008r2, Win7:
                        config_cmds += ,disable_tcp_heuristics_cmd,disabled_tcp_autotuning_cmd,enable_ctcp_cmd
                - cygwin:
                    only Windows
                    use_cygwin = yes
                    netperf_src = %s:\netperf\netperf-2.6.0
                    cygwin_root = C:\rhcygwin\home\Administrator
                    netserver_path = C:\rhcygwin\usr\local\bin
                    cygwin_start = C:\rhcygwin\Cygwin.bat -i /Cygwin-Terminal.ico -
                    netserv_start_cmd = netserver
                    netperf_install_cmd = cd netperf-2.6.0; ./configure --enable-burst --enable-demo=yes; make; make install
    variants:
        - with_jumbo:
            mtu = 9000
            # please config physical nic name of client for jumbo frame case by uncommenting it
            # client_physical_nic = <your_client_physical_nic>
        - default:
